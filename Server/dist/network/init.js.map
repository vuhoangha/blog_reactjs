{"version":3,"sources":["../../src/network/init.js"],"names":["app","use","urlencoded","extended","json","callbackGet","data","res","send","entity","thisRouter","get","req","entityName","route","path","split","listKey","isExistProperty","query","listKeyObject","JSON","parse","key","i","length","push","stringify","selectByMultiKey","post","put","delete","listen","console","log"],"mappings":";AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAH,IAAIC,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;;AAEA,IAAMC,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,GAAP,EAAe;AAC/BA,QAAIC,IAAJ,CAASF,IAAT;AACH,CAFD;;;;;;;AAIA,gLAAyC;AAAA,YAA9BG,MAA8B;;AACrC,YAAMC,mBAAiBD,MAAvB;;AAEAT,YAAIW,GAAJ,CAAQD,UAAR,EAAoB,UAACE,GAAD,EAAML,GAAN,EAAc;AAC9B,gBAAMM,aAAaD,IAAIE,KAAJ,CAAUC,IAAV,CAAeC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAnB;AACA,gBAAMC,UAAU,EAAhB;AACA,gBAAI,eAAKC,eAAL,CAAqBN,IAAIO,KAAzB,EAAgC,KAAhC,CAAJ,EAA4C;AACxC,oBAAMC,gBAAgBC,KAAKC,KAAL,CAAWV,IAAIO,KAAJ,CAAUI,GAArB,CAAtB;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,cAAcK,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3CP,4BAAQS,IAAR,CAAaL,KAAKM,SAAL,CAAeP,cAAcI,CAAd,CAAf,CAAb;AACH;AACJ;AACD,6BAAOI,gBAAP,CAAwBf,UAAxB,EAAoCI,OAApC,EAA6CZ,WAA7C,EAA0DE,GAA1D;AACH,SAVD;;AAYAP,YAAI6B,IAAJ,CAASnB,UAAT,EAAqB,UAACE,GAAD,EAAML,GAAN,EAAc;AAC/BA,gBAAIC,IAAJ,CAAS,YAAT;AACH,SAFD;;AAIAR,YAAI8B,GAAJ,CAAQpB,UAAR,EAAoB,UAACE,GAAD,EAAML,GAAN,EAAc;AAC9BA,gBAAIC,IAAJ,CAAS,WAAT;AACH,SAFD;;AAIAR,YAAI+B,MAAJ,CAAWrB,UAAX,EAAuB,UAACE,GAAD,EAAML,GAAN,EAAc;AACjCA,gBAAIC,IAAJ,CAAS,cAAT;AACH,SAFD;AAGH;;;;;;;;;;;;;;;;AAGDR,IAAIgC,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnBC,YAAQC,GAAR,CAAY,yBAAZ;AACH,CAFD","file":"init.js","sourcesContent":["\r\n/*eslint linebreak-style: [\"error\", \"windows\"]*/\r\n\r\n// Create -> Post\r\n// Read   -> Get\r\n// Update -> Put\r\n// Delete -> Delete\r\n\r\n'use strict';\r\n\r\nimport express from '../../node_modules/express';\r\nimport bodyParser from '../../node_modules/body-parser';\r\nimport listEntityRegister from '../entity/entity_register';\r\nimport util from '../util';\r\nimport select from '../database/select';\r\n\r\nconst app = express();\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\n\r\nconst callbackGet = (data, res) => {\r\n    res.send(data);\r\n};\r\n\r\nfor (const entity of listEntityRegister) {\r\n    const thisRouter = `/${entity}`;\r\n\r\n    app.get(thisRouter, (req, res) => {\r\n        const entityName = req.route.path.split('/')[1];\r\n        const listKey = [];\r\n        if (util.isExistProperty(req.query, 'key')) {\r\n            const listKeyObject = JSON.parse(req.query.key);\r\n            for (let i = 0; i < listKeyObject.length; i++) {\r\n                listKey.push(JSON.stringify(listKeyObject[i]));\r\n            }\r\n        }\r\n        select.selectByMultiKey(entityName, listKey, callbackGet, res);\r\n    });\r\n\r\n    app.post(thisRouter, (req, res) => {\r\n        res.send('Hello Post');\r\n    });\r\n\r\n    app.put(thisRouter, (req, res) => {\r\n        res.send('Hello put');\r\n    });\r\n\r\n    app.delete(thisRouter, (req, res) => {\r\n        res.send('Hello delete');\r\n    });\r\n}\r\n\r\n\r\napp.listen(3000, () => {\r\n    console.log('Listening on port 3000!');\r\n});\r\n"]}